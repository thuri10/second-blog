<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>malware on Solar Bits</title>
    <link>https://thuri10.github.io/tags/malware/</link>
    <description>Recent content in malware on Solar Bits</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 07 Dec 2021 19:02:24 +0300</lastBuildDate><atom:link href="https://thuri10.github.io/tags/malware/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Reversing MalwareTech 8-bit Bytecode Virtual Machine</title>
      <link>https://thuri10.github.io/p/reversing-malwaretech-8-bit-bytecode-virtual-machine/</link>
      <pubDate>Tue, 07 Dec 2021 19:02:24 +0300</pubDate>
      
      <guid>https://thuri10.github.io/p/reversing-malwaretech-8-bit-bytecode-virtual-machine/</guid>
      <description>Challenge description.
 vm1.exe implements a simple 8-bit virtual machine (VM) to try and stop reverse engineers from retrieving the flag. The VM’s RAM contains the encrypted flag and some bytecode to decrypt it. Can you figure out how the VM works and write your own to decrypt the flag? A copy of the VM’s RAM has been provided in ram.bin (this data is identical to the ram content of the malware’s VM before execution and contains both the custom assembly code and encrypted flag).</description>
    </item>
    
    <item>
      <title>Static Analysis of Malware Strings</title>
      <link>https://thuri10.github.io/p/static-analysis-of-malware-strings/</link>
      <pubDate>Tue, 07 Dec 2021 19:02:13 +0300</pubDate>
      
      <guid>https://thuri10.github.io/p/static-analysis-of-malware-strings/</guid>
      <description>This post is a brief walkthrough of &amp;ldquo;strings&amp;rdquo; challenges provided by MalwareTech. The challenges can be downloaded from the following website challenges.
The goal of &amp;ldquo;strings&amp;rdquo; challenges is to understand various implementation of strings in malware through static analysis. Strings are very useful in storing the configurations, decryption keys, data and c&amp;amp;c server addresses.
For analysis, I will use IDApro free for analysis. The author of the challenges provides a set of rules to follow while solving the challenges</description>
    </item>
    
  </channel>
</rss>
