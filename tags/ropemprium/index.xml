<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ropemprium on Solar Bits</title>
    <link>https://thuri10.github.io/tags/ropemprium/</link>
    <description>Recent content in ropemprium on Solar Bits</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 20 Dec 2021 20:50:44 +0300</lastBuildDate><atom:link href="https://thuri10.github.io/tags/ropemprium/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Return-Oriented Programming - Retcsu</title>
      <link>https://thuri10.github.io/p/return-oriented-programming-retcsu/</link>
      <pubDate>Mon, 20 Dec 2021 20:50:44 +0300</pubDate>
      
      <guid>https://thuri10.github.io/p/return-oriented-programming-retcsu/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Return-Oriented Programming - Pivot</title>
      <link>https://thuri10.github.io/p/return-oriented-programming-pivot/</link>
      <pubDate>Mon, 20 Dec 2021 20:50:30 +0300</pubDate>
      
      <guid>https://thuri10.github.io/p/return-oriented-programming-pivot/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Return-Oriented Programming - Fluff</title>
      <link>https://thuri10.github.io/p/return-oriented-programming-fluff/</link>
      <pubDate>Mon, 20 Dec 2021 20:50:20 +0300</pubDate>
      
      <guid>https://thuri10.github.io/p/return-oriented-programming-fluff/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Return-Oriented Programming - Badchars</title>
      <link>https://thuri10.github.io/p/return-oriented-programming-badchars/</link>
      <pubDate>Mon, 20 Dec 2021 20:50:06 +0300</pubDate>
      
      <guid>https://thuri10.github.io/p/return-oriented-programming-badchars/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Return-Oriented Programming - Write4</title>
      <link>https://thuri10.github.io/p/return-oriented-programming-write4/</link>
      <pubDate>Mon, 20 Dec 2021 20:49:54 +0300</pubDate>
      
      <guid>https://thuri10.github.io/p/return-oriented-programming-write4/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Return-Oriented Programming - Callme</title>
      <link>https://thuri10.github.io/p/return-oriented-programming-callme/</link>
      <pubDate>Mon, 20 Dec 2021 20:49:43 +0300</pubDate>
      
      <guid>https://thuri10.github.io/p/return-oriented-programming-callme/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Return-Oriented Programming - Split</title>
      <link>https://thuri10.github.io/p/return-oriented-programming-split/</link>
      <pubDate>Mon, 20 Dec 2021 20:49:37 +0300</pubDate>
      
      <guid>https://thuri10.github.io/p/return-oriented-programming-split/</guid>
      <description>disassembling of the usefulfunction in the binary
(gdb) disas usefulFunction Dump of assembler code for function usefulFunction: 0x0000000000400742 &amp;lt;+0&amp;gt;:	push rbp 0x0000000000400743 &amp;lt;+1&amp;gt;:	mov rbp,rsp 0x0000000000400746 &amp;lt;+4&amp;gt;:	mov edi,0x40084a 0x000000000040074b &amp;lt;+9&amp;gt;:	call 0x400560 &amp;lt;system@plt&amp;gt; 0x0000000000400750 &amp;lt;+14&amp;gt;:	nop 0x0000000000400751 &amp;lt;+15&amp;gt;:	pop rbp 0x0000000000400752 &amp;lt;+16&amp;gt;:	ret End of assembler dump. (gdb) x/s 0x40084a 0x40084a:	&amp;#34;/bin/ls&amp;#34; (gdb) let look at the strings in order to get useful strings for our case. The goal is to read the flag from the system.</description>
    </item>
    
    <item>
      <title>Return-Oriented Programming - Ret2win</title>
      <link>https://thuri10.github.io/p/return-oriented-programming-ret2win/</link>
      <pubDate>Mon, 20 Dec 2021 20:49:23 +0300</pubDate>
      
      <guid>https://thuri10.github.io/p/return-oriented-programming-ret2win/</guid>
      <description>Introduction GOAL: Locate a method that you want to call within the binary. Call it by overwriting a saved return address on the stack.
find the address of the ret2win and determine the size of the buffer by looking at the gdb.
(gdb) info functions All defined functions: Non-debugging symbols: 0x0000000000400528 _init 0x0000000000400550 puts@plt 0x0000000000400560 system@plt 0x0000000000400570 printf@plt 0x0000000000400580 memset@plt 0x0000000000400590 read@plt 0x00000000004005a0 setvbuf@plt 0x00000000004005b0 _start 0x00000000004005e0 _dl_relocate_static_pie 0x00000000004005f0 deregister_tm_clones 0x0000000000400620 register_tm_clones 0x0000000000400660 __do_global_dtors_aux 0x0000000000400690 frame_dummy 0x0000000000400697 main 0x00000000004006e8 pwnme 0x0000000000400756 ret2win 0x0000000000400780 __libc_csu_init 0x00000000004007f0 __libc_csu_fini 0x00000000004007f4 _fini (gdb) from the disassembly of the pwnme function, we can determine the size of the buffer we reading to.</description>
    </item>
    
  </channel>
</rss>
