<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Solar Bits</title>
    <link>https://thuri10.github.io/post/</link>
    <description>Recent content in Posts on Solar Bits</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 20 Dec 2021 20:50:44 +0300</lastBuildDate><atom:link href="https://thuri10.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Return-Oriented Programming - Retcsu</title>
      <link>https://thuri10.github.io/p/return-oriented-programming-retcsu/</link>
      <pubDate>Mon, 20 Dec 2021 20:50:44 +0300</pubDate>
      
      <guid>https://thuri10.github.io/p/return-oriented-programming-retcsu/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Return-Oriented Programming - Pivot</title>
      <link>https://thuri10.github.io/p/return-oriented-programming-pivot/</link>
      <pubDate>Mon, 20 Dec 2021 20:50:30 +0300</pubDate>
      
      <guid>https://thuri10.github.io/p/return-oriented-programming-pivot/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Return-Oriented Programming - Fluff</title>
      <link>https://thuri10.github.io/p/return-oriented-programming-fluff/</link>
      <pubDate>Mon, 20 Dec 2021 20:50:20 +0300</pubDate>
      
      <guid>https://thuri10.github.io/p/return-oriented-programming-fluff/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Return-Oriented Programming - Badchars</title>
      <link>https://thuri10.github.io/p/return-oriented-programming-badchars/</link>
      <pubDate>Mon, 20 Dec 2021 20:50:06 +0300</pubDate>
      
      <guid>https://thuri10.github.io/p/return-oriented-programming-badchars/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Return-Oriented Programming - Write4</title>
      <link>https://thuri10.github.io/p/return-oriented-programming-write4/</link>
      <pubDate>Mon, 20 Dec 2021 20:49:54 +0300</pubDate>
      
      <guid>https://thuri10.github.io/p/return-oriented-programming-write4/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Return-Oriented Programming - Callme</title>
      <link>https://thuri10.github.io/p/return-oriented-programming-callme/</link>
      <pubDate>Mon, 20 Dec 2021 20:49:43 +0300</pubDate>
      
      <guid>https://thuri10.github.io/p/return-oriented-programming-callme/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Return-Oriented Programming - Split</title>
      <link>https://thuri10.github.io/p/return-oriented-programming-split/</link>
      <pubDate>Mon, 20 Dec 2021 20:49:37 +0300</pubDate>
      
      <guid>https://thuri10.github.io/p/return-oriented-programming-split/</guid>
      <description>disassembling of the usefulfunction in the binary
(gdb) disas usefulFunction Dump of assembler code for function usefulFunction: 0x0000000000400742 &amp;lt;+0&amp;gt;:	push rbp 0x0000000000400743 &amp;lt;+1&amp;gt;:	mov rbp,rsp 0x0000000000400746 &amp;lt;+4&amp;gt;:	mov edi,0x40084a 0x000000000040074b &amp;lt;+9&amp;gt;:	call 0x400560 &amp;lt;system@plt&amp;gt; 0x0000000000400750 &amp;lt;+14&amp;gt;:	nop 0x0000000000400751 &amp;lt;+15&amp;gt;:	pop rbp 0x0000000000400752 &amp;lt;+16&amp;gt;:	ret End of assembler dump. (gdb) x/s 0x40084a 0x40084a:	&amp;#34;/bin/ls&amp;#34; (gdb) let look at the strings in order to get useful strings for our case. The goal is to read the flag from the system.</description>
    </item>
    
    <item>
      <title>Return-Oriented Programming - Ret2win</title>
      <link>https://thuri10.github.io/p/return-oriented-programming-ret2win/</link>
      <pubDate>Mon, 20 Dec 2021 20:49:23 +0300</pubDate>
      
      <guid>https://thuri10.github.io/p/return-oriented-programming-ret2win/</guid>
      <description>Introduction GOAL: Locate a method that you want to call within the binary. Call it by overwriting a saved return address on the stack.
find the address of the ret2win and determine the size of the buffer by looking at the gdb.
(gdb) info functions All defined functions: Non-debugging symbols: 0x0000000000400528 _init 0x0000000000400550 puts@plt 0x0000000000400560 system@plt 0x0000000000400570 printf@plt 0x0000000000400580 memset@plt 0x0000000000400590 read@plt 0x00000000004005a0 setvbuf@plt 0x00000000004005b0 _start 0x00000000004005e0 _dl_relocate_static_pie 0x00000000004005f0 deregister_tm_clones 0x0000000000400620 register_tm_clones 0x0000000000400660 __do_global_dtors_aux 0x0000000000400690 frame_dummy 0x0000000000400697 main 0x00000000004006e8 pwnme 0x0000000000400756 ret2win 0x0000000000400780 __libc_csu_init 0x00000000004007f0 __libc_csu_fini 0x00000000004007f4 _fini (gdb) from the disassembly of the pwnme function, we can determine the size of the buffer we reading to.</description>
    </item>
    
    <item>
      <title>Android Malware analysis series</title>
      <link>https://thuri10.github.io/p/android-malware-analysis-series/</link>
      <pubDate>Sun, 12 Dec 2021 19:02:05 +0300</pubDate>
      
      <guid>https://thuri10.github.io/p/android-malware-analysis-series/</guid>
      <description>the sample for analysis is Anubis sha256 of the sample is: edda95f68c0cdf9f4c13e4e35211b42666c014f2c0831210b59296071139f159
steps for analysis malware
 decompilation static analysis of manifest files to understand file name, permissions , etc   </description>
    </item>
    
    <item>
      <title>Analyzing Ransomware Malware challenge</title>
      <link>https://thuri10.github.io/p/ransomware/</link>
      <pubDate>Tue, 07 Dec 2021 19:02:36 +0300</pubDate>
      
      <guid>https://thuri10.github.io/p/ransomware/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Reversing Custom Bytecode Virtual Machine</title>
      <link>https://thuri10.github.io/p/reversing-custom-bytecode-virtual-machine/</link>
      <pubDate>Tue, 07 Dec 2021 19:02:24 +0300</pubDate>
      
      <guid>https://thuri10.github.io/p/reversing-custom-bytecode-virtual-machine/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Static analysis of Malware Strings</title>
      <link>https://thuri10.github.io/p/static-analysis-of-malware-strings/</link>
      <pubDate>Tue, 07 Dec 2021 19:02:13 +0300</pubDate>
      
      <guid>https://thuri10.github.io/p/static-analysis-of-malware-strings/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Android Application Security Part4</title>
      <link>https://thuri10.github.io/p/android-application-security-part4/</link>
      <pubDate>Wed, 03 Nov 2021 15:54:03 +0300</pubDate>
      
      <guid>https://thuri10.github.io/p/android-application-security-part4/</guid>
      <description>Introduction  show how to scan the application for default keys how to use nuclei regular expressions example of scanning for deeplinks application in an application. sanning manifest file for deeplinks.   Introduction </description>
    </item>
    
    <item>
      <title>Android Application security Part 3</title>
      <link>https://thuri10.github.io/p/android-application-security-part-3/</link>
      <pubDate>Wed, 27 Oct 2021 15:53:59 +0300</pubDate>
      
      <guid>https://thuri10.github.io/p/android-application-security-part-3/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Android Application Security Part2</title>
      <link>https://thuri10.github.io/p/android-application-security-part2/</link>
      <pubDate>Mon, 25 Oct 2021 15:53:55 +0300</pubDate>
      
      <guid>https://thuri10.github.io/p/android-application-security-part2/</guid>
      <description>Insecure Storages This is the second part of the android application security. This part focuses on the local sqlite databases, firebase and AWS security.
Flag7 - Sqlite This is level is about understanding the sqlite local database in the applications folder.
public FlagSevenSqliteActivity() { byte[] bArr = this.x; //sqlite  d.m.b.d.b(bArr, &amp;#34;decodedDirectoryOne&amp;#34;); Charset charset = StandardCharsets.UTF_8; d.m.b.d.b(charset, &amp;#34;StandardCharsets.UTF_8&amp;#34;); this.z = new String(bArr, charset); byte[] bArr2 = this.y; //f1ag-pa55  d.m.b.d.b(bArr2, &amp;#34;decodedDirectoryTwo&amp;#34;); Charset charset2 = StandardCharsets.</description>
    </item>
    
    <item>
      <title>Android Application Security Series- Part 1</title>
      <link>https://thuri10.github.io/p/android-application-security-series-part-1/</link>
      <pubDate>Wed, 20 Oct 2021 20:19:29 +0300</pubDate>
      
      <guid>https://thuri10.github.io/p/android-application-security-series-part-1/</guid>
      <description>Introduction This is a five part beginner series of Android application security with Vulnerable Android application examples. The application used in the first three part series is a vulnerable Android application developed by @B3nac.
The application is InjuredAndroid, it covers different security concepts such as hardcoded secrets, weak cryptographic algorithms, misconfiguration etc. The application can be downloaded from the following provided links playstore or from github.
Inorder to solve the challenges or follow through the guides is you need to have an android phone or an emulator.</description>
    </item>
    
  </channel>
</rss>
