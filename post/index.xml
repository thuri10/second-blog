<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Solar Bits</title>
    <link>https://thuri10.github.io/post/</link>
    <description>Recent content in Posts on Solar Bits</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 06 Feb 2022 17:40:18 +0300</lastBuildDate><atom:link href="https://thuri10.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RedLineStealer Information Stealer Analysis</title>
      <link>https://thuri10.github.io/p/redlinestealer-information-stealer-analysis/</link>
      <pubDate>Sun, 06 Feb 2022 17:40:18 +0300</pubDate>
      
      <guid>https://thuri10.github.io/p/redlinestealer-information-stealer-analysis/</guid>
      <description>What is RedLine Malware? Redline malware is an Information Stealer written in c# , targeting windows victims. It is used for gathering victims information ranging from the Browser cookies, saved credentials, Discord tokens, OS information, Languages, VPN profiles, Installed Programs and Network configurations.
The malware is also capable of downloading additional malware from its C2 servers.
Stage1 - Loader Analysis The first stage of sample malware is used for assembling and executing an additional payload.</description>
    </item>
    
    <item>
      <title>RemcosRat infection chain from excel with Macros</title>
      <link>https://thuri10.github.io/p/remcosrat-infection-chain-from-excel-with-macros/</link>
      <pubDate>Tue, 25 Jan 2022 15:27:57 +0300</pubDate>
      
      <guid>https://thuri10.github.io/p/remcosrat-infection-chain-from-excel-with-macros/</guid>
      <description>What is RemcosRat? RemcosRAT is a Fileless multi-stage malware that is distributed through malicious macros in Excel files. The malware enables remote administration of infected systems to perform unintended actions. This is a simple guide on understanding RemcosRat infection chain. The RemcosRAT infection can be described as shown in the image by @Unit 42.
 Infection Chain 
The infection chain start through phishing of the targets through mail services, the final payload of the infection chain is the used for communicating through TCP port 10174 as shown in the image.</description>
    </item>
    
    <item>
      <title>Return-Oriented Programming - Retcsu</title>
      <link>https://thuri10.github.io/p/return-oriented-programming-retcsu/</link>
      <pubDate>Mon, 20 Dec 2021 20:50:44 +0300</pubDate>
      
      <guid>https://thuri10.github.io/p/return-oriented-programming-retcsu/</guid>
      <description>Introduction Challenge description
 We&amp;rsquo;re back in ret2win territory, but this time with no useful gadgets.How will we populate critical registers without them? The goal of this level is understanding of universal rop techniques due to to the limited gadgets available in the binary as compared to the ret2win challenge. The binary can be downloaded from authors website Ropemporium
 After downloading the binary, check the enabled protections and mitigation&amp;rsquo;s. Only NX and Partial RELRO protections are turned on as shown below.</description>
    </item>
    
    <item>
      <title>Return-Oriented Programming - Write4</title>
      <link>https://thuri10.github.io/p/return-oriented-programming-write4/</link>
      <pubDate>Mon, 20 Dec 2021 20:49:54 +0300</pubDate>
      
      <guid>https://thuri10.github.io/p/return-oriented-programming-write4/</guid>
      <description>Introduction Challenge Description
 Our first foray into proper gadget use. A useful function is still present, but we&amp;rsquo;ll need to write a string into memory somehow.
 The goal of this challenge is understanding how to abuse readable and writable memory regions in binary files.The target binary can be downloaded from the authors website ropemporium.
First we check the binary protections enabled on the downloaded binary. Only NX (Not executable) is enabled on the binary according to checksec binary utility as shown in image below.</description>
    </item>
    
    <item>
      <title>Return-Oriented Programming - Callme</title>
      <link>https://thuri10.github.io/p/return-oriented-programming-callme/</link>
      <pubDate>Mon, 20 Dec 2021 20:49:43 +0300</pubDate>
      
      <guid>https://thuri10.github.io/p/return-oriented-programming-callme/</guid>
      <description>Introduction Challenge Description
The goal of this challenge is to understand how more than one argument is passed in x64 function. The challenge can be downloaded from the authors website ropemporium
 Reliably make consecutive calls to imported functions. Use some new techniques and learn about the Procedure Linkage Table.
 The program needs make consecutive calls to a function with three arguments in order to get a correct flag. The challenge description is similar to the split challenge.</description>
    </item>
    
    <item>
      <title>Return-Oriented Programming - Split</title>
      <link>https://thuri10.github.io/p/return-oriented-programming-split/</link>
      <pubDate>Mon, 20 Dec 2021 20:49:37 +0300</pubDate>
      
      <guid>https://thuri10.github.io/p/return-oriented-programming-split/</guid>
      <description>Introduction Challenge Description
 The elements that allowed you to complete ret2win are still present, they&amp;rsquo;ve just been split apart. Find them and recombine them using a short ROP chain
 The goal of this challenge is to understand how function arguments are passed in 64bit machine when doing return oriented programming. The target binary can be downloaded from the authors website ropemporium.
First we check the binary protections enabled on the downloaded.</description>
    </item>
    
    <item>
      <title>Return-Oriented Programming - Ret2win</title>
      <link>https://thuri10.github.io/p/return-oriented-programming-ret2win/</link>
      <pubDate>Mon, 20 Dec 2021 20:49:23 +0300</pubDate>
      
      <guid>https://thuri10.github.io/p/return-oriented-programming-ret2win/</guid>
      <description>Introduction Challenge description
 Locate a method that you want to call within the binary. Call it by overwriting a saved return address on the stack.
 This challenge is classical pwn challenge of overwriting the return address with desired address you want to return to.
The binaries for the challenges can be downloaded from the author`s website ropemporium.The goal of first challenge is to call the ret2win function.
After downloading the binary, the first thing is to check the binary protection enabled on the binary using checksec utility.</description>
    </item>
    
    <item>
      <title>Reversing MalwareTech 8-bit Bytecode Virtual Machine</title>
      <link>https://thuri10.github.io/p/reversing-malwaretech-8-bit-bytecode-virtual-machine/</link>
      <pubDate>Tue, 07 Dec 2021 19:02:24 +0300</pubDate>
      
      <guid>https://thuri10.github.io/p/reversing-malwaretech-8-bit-bytecode-virtual-machine/</guid>
      <description>Challenge description.
 vm1.exe implements a simple 8-bit virtual machine (VM) to try and stop reverse engineers from retrieving the flag. The VM’s RAM contains the encrypted flag and some bytecode to decrypt it. Can you figure out how the VM works and write your own to decrypt the flag? A copy of the VM’s RAM has been provided in ram.bin (this data is identical to the ram content of the malware’s VM before execution and contains both the custom assembly code and encrypted flag).</description>
    </item>
    
    <item>
      <title>Static Analysis of Malware Strings</title>
      <link>https://thuri10.github.io/p/static-analysis-of-malware-strings/</link>
      <pubDate>Tue, 07 Dec 2021 19:02:13 +0300</pubDate>
      
      <guid>https://thuri10.github.io/p/static-analysis-of-malware-strings/</guid>
      <description>This post is a brief walkthrough of &amp;ldquo;strings&amp;rdquo; challenges provided by MalwareTech. The challenges can be downloaded from the following website challenges.
The goal of &amp;ldquo;strings&amp;rdquo; challenges is to understand various implementation of strings in malware through static analysis. Strings are very useful in storing the configurations, decryption keys, data and c&amp;amp;c server addresses.
For analysis, I will use IDApro free for analysis. The author of the challenges provides a set of rules to follow while solving the challenges</description>
    </item>
    
    <item>
      <title>Android Application Security Part2</title>
      <link>https://thuri10.github.io/p/android-application-security-part2/</link>
      <pubDate>Mon, 25 Oct 2021 15:53:55 +0300</pubDate>
      
      <guid>https://thuri10.github.io/p/android-application-security-part2/</guid>
      <description>Insecure Storages This is the second part series of the android application security. This part focuses on the security of sqlite databases, firebase and AWS security.
Flag7 - Sqlite What is sqlite?
Sqlite is a structure query base database that enables applications to do local storage in the application directory. The goal of the challenge is to understand how local storage of databases may lead to leakage of information.
First step is to decompile the FlagSevenSqliteActivity using jadx.</description>
    </item>
    
    <item>
      <title>Android Application Security Series- Part 1</title>
      <link>https://thuri10.github.io/p/android-application-security-series-part-1/</link>
      <pubDate>Wed, 20 Oct 2021 20:19:29 +0300</pubDate>
      
      <guid>https://thuri10.github.io/p/android-application-security-series-part-1/</guid>
      <description>Introduction This is a five part beginner series of Android application security with Vulnerable Android application examples. The application used in the first three part series is a vulnerable Android application developed by @B3nac.
The application is called InjuredAndroid, it covers different security concepts such as hardcoded secrets, weak cryptographic algorithms, misconfiguration, webview vulnerabilities etc. The application can be downloaded from the following provided links playstore or github.
For solving the challenges or following through the guides is you need to have an android phone or an emulator.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://thuri10.github.io/p/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://thuri10.github.io/p/</guid>
      <description>What is readline stealer sample analysis the sha256 of the sample 72b7f772e019def30abcf817ae7a3004a84215daef67588eaa1fde3839df2fa2
readline.png
stage1 Loader Analysis  explain how the assembly code works decode the base64 files replace the text files and provide the files back   loading our program
Assembly assembly = Assembly.Load(Program.NBXbnmXNBN()); #information stolen by the malware
Mozilla
coMANGOokies.sqMANGOlite  steals the mozilla browser cookies steals mozilla personal profiles   VPn data
  NordApp
  OpenVPN it also steals the profiles of openvpn.</description>
    </item>
    
  </channel>
</rss>
